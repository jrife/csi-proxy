// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: client/api/disk/v1alpha1/api.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListDiskLocationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListDiskLocationsRequest) Reset() {
	*x = ListDiskLocationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_disk_v1alpha1_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDiskLocationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDiskLocationsRequest) ProtoMessage() {}

func (x *ListDiskLocationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_disk_v1alpha1_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDiskLocationsRequest.ProtoReflect.Descriptor instead.
func (*ListDiskLocationsRequest) Descriptor() ([]byte, []int) {
	return file_client_api_disk_v1alpha1_api_proto_rawDescGZIP(), []int{0}
}

type DiskLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adapter string `protobuf:"bytes,1,opt,name=Adapter,proto3" json:"Adapter,omitempty"`
	Bus     string `protobuf:"bytes,2,opt,name=Bus,proto3" json:"Bus,omitempty"`
	Target  string `protobuf:"bytes,3,opt,name=Target,proto3" json:"Target,omitempty"`
	LUNID   string `protobuf:"bytes,4,opt,name=LUNID,proto3" json:"LUNID,omitempty"`
}

func (x *DiskLocation) Reset() {
	*x = DiskLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_disk_v1alpha1_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskLocation) ProtoMessage() {}

func (x *DiskLocation) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_disk_v1alpha1_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskLocation.ProtoReflect.Descriptor instead.
func (*DiskLocation) Descriptor() ([]byte, []int) {
	return file_client_api_disk_v1alpha1_api_proto_rawDescGZIP(), []int{1}
}

func (x *DiskLocation) GetAdapter() string {
	if x != nil {
		return x.Adapter
	}
	return ""
}

func (x *DiskLocation) GetBus() string {
	if x != nil {
		return x.Bus
	}
	return ""
}

func (x *DiskLocation) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *DiskLocation) GetLUNID() string {
	if x != nil {
		return x.LUNID
	}
	return ""
}

type ListDiskLocationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of disk device IDs and <adapter, bus, target, lun ID> associated with each disk device
	DiskLocations map[string]*DiskLocation `protobuf:"bytes,1,rep,name=disk_locations,json=diskLocations,proto3" json:"disk_locations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListDiskLocationsResponse) Reset() {
	*x = ListDiskLocationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_disk_v1alpha1_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDiskLocationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDiskLocationsResponse) ProtoMessage() {}

func (x *ListDiskLocationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_disk_v1alpha1_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDiskLocationsResponse.ProtoReflect.Descriptor instead.
func (*ListDiskLocationsResponse) Descriptor() ([]byte, []int) {
	return file_client_api_disk_v1alpha1_api_proto_rawDescGZIP(), []int{2}
}

func (x *ListDiskLocationsResponse) GetDiskLocations() map[string]*DiskLocation {
	if x != nil {
		return x.DiskLocations
	}
	return nil
}

type PartitionDiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Disk device ID of the disk to partition
	DiskID string `protobuf:"bytes,1,opt,name=diskID,proto3" json:"diskID,omitempty"`
}

func (x *PartitionDiskRequest) Reset() {
	*x = PartitionDiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_disk_v1alpha1_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionDiskRequest) ProtoMessage() {}

func (x *PartitionDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_disk_v1alpha1_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionDiskRequest.ProtoReflect.Descriptor instead.
func (*PartitionDiskRequest) Descriptor() ([]byte, []int) {
	return file_client_api_disk_v1alpha1_api_proto_rawDescGZIP(), []int{3}
}

func (x *PartitionDiskRequest) GetDiskID() string {
	if x != nil {
		return x.DiskID
	}
	return ""
}

type PartitionDiskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PartitionDiskResponse) Reset() {
	*x = PartitionDiskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_disk_v1alpha1_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionDiskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionDiskResponse) ProtoMessage() {}

func (x *PartitionDiskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_disk_v1alpha1_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionDiskResponse.ProtoReflect.Descriptor instead.
func (*PartitionDiskResponse) Descriptor() ([]byte, []int) {
	return file_client_api_disk_v1alpha1_api_proto_rawDescGZIP(), []int{4}
}

type RescanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RescanRequest) Reset() {
	*x = RescanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_disk_v1alpha1_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RescanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RescanRequest) ProtoMessage() {}

func (x *RescanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_disk_v1alpha1_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RescanRequest.ProtoReflect.Descriptor instead.
func (*RescanRequest) Descriptor() ([]byte, []int) {
	return file_client_api_disk_v1alpha1_api_proto_rawDescGZIP(), []int{5}
}

type RescanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RescanResponse) Reset() {
	*x = RescanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_disk_v1alpha1_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RescanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RescanResponse) ProtoMessage() {}

func (x *RescanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_disk_v1alpha1_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RescanResponse.ProtoReflect.Descriptor instead.
func (*RescanResponse) Descriptor() ([]byte, []int) {
	return file_client_api_disk_v1alpha1_api_proto_rawDescGZIP(), []int{6}
}

type GetDiskNumberByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Disk ID
	DiskName string `protobuf:"bytes,1,opt,name=disk_name,json=diskName,proto3" json:"disk_name,omitempty"`
}

func (x *GetDiskNumberByNameRequest) Reset() {
	*x = GetDiskNumberByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_disk_v1alpha1_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiskNumberByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiskNumberByNameRequest) ProtoMessage() {}

func (x *GetDiskNumberByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_disk_v1alpha1_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiskNumberByNameRequest.ProtoReflect.Descriptor instead.
func (*GetDiskNumberByNameRequest) Descriptor() ([]byte, []int) {
	return file_client_api_disk_v1alpha1_api_proto_rawDescGZIP(), []int{7}
}

func (x *GetDiskNumberByNameRequest) GetDiskName() string {
	if x != nil {
		return x.DiskName
	}
	return ""
}

type GetDiskNumberByNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Disk number
	DiskNumber string `protobuf:"bytes,1,opt,name=disk_number,json=diskNumber,proto3" json:"disk_number,omitempty"`
}

func (x *GetDiskNumberByNameResponse) Reset() {
	*x = GetDiskNumberByNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_disk_v1alpha1_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiskNumberByNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiskNumberByNameResponse) ProtoMessage() {}

func (x *GetDiskNumberByNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_disk_v1alpha1_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiskNumberByNameResponse.ProtoReflect.Descriptor instead.
func (*GetDiskNumberByNameResponse) Descriptor() ([]byte, []int) {
	return file_client_api_disk_v1alpha1_api_proto_rawDescGZIP(), []int{8}
}

func (x *GetDiskNumberByNameResponse) GetDiskNumber() string {
	if x != nil {
		return x.DiskNumber
	}
	return ""
}

var File_client_api_disk_v1alpha1_api_proto protoreflect.FileDescriptor

var file_client_api_disk_v1alpha1_api_proto_rawDesc = []byte{
	0x0a, 0x22, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x73,
	0x6b, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x22, 0x1a,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x68, 0x0a, 0x0c, 0x44, 0x69,
	0x73, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x42, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x4c, 0x55, 0x4e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c,
	0x55, 0x4e, 0x49, 0x44, 0x22, 0xd4, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73,
	0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x44, 0x69, 0x73, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x58, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2e, 0x0a, 0x14, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x44, 0x22, 0x17, 0x0a, 0x15, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x63, 0x61, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x10, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x63, 0x61, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x69,
	0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x3e, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x32, 0xdf, 0x02, 0x0a, 0x04, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x5e, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x22, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x69, 0x73, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0d, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x1e, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x3d, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x63, 0x61, 0x6e, 0x12, 0x17, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2d, 0x63, 0x73,
	0x69, 0x2f, 0x63, 0x73, 0x69, 0x2d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_client_api_disk_v1alpha1_api_proto_rawDescOnce sync.Once
	file_client_api_disk_v1alpha1_api_proto_rawDescData = file_client_api_disk_v1alpha1_api_proto_rawDesc
)

func file_client_api_disk_v1alpha1_api_proto_rawDescGZIP() []byte {
	file_client_api_disk_v1alpha1_api_proto_rawDescOnce.Do(func() {
		file_client_api_disk_v1alpha1_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_client_api_disk_v1alpha1_api_proto_rawDescData)
	})
	return file_client_api_disk_v1alpha1_api_proto_rawDescData
}

var file_client_api_disk_v1alpha1_api_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_client_api_disk_v1alpha1_api_proto_goTypes = []interface{}{
	(*ListDiskLocationsRequest)(nil),    // 0: v1alpha1.ListDiskLocationsRequest
	(*DiskLocation)(nil),                // 1: v1alpha1.DiskLocation
	(*ListDiskLocationsResponse)(nil),   // 2: v1alpha1.ListDiskLocationsResponse
	(*PartitionDiskRequest)(nil),        // 3: v1alpha1.PartitionDiskRequest
	(*PartitionDiskResponse)(nil),       // 4: v1alpha1.PartitionDiskResponse
	(*RescanRequest)(nil),               // 5: v1alpha1.RescanRequest
	(*RescanResponse)(nil),              // 6: v1alpha1.RescanResponse
	(*GetDiskNumberByNameRequest)(nil),  // 7: v1alpha1.GetDiskNumberByNameRequest
	(*GetDiskNumberByNameResponse)(nil), // 8: v1alpha1.GetDiskNumberByNameResponse
	nil,                                 // 9: v1alpha1.ListDiskLocationsResponse.DiskLocationsEntry
}
var file_client_api_disk_v1alpha1_api_proto_depIdxs = []int32{
	9, // 0: v1alpha1.ListDiskLocationsResponse.disk_locations:type_name -> v1alpha1.ListDiskLocationsResponse.DiskLocationsEntry
	1, // 1: v1alpha1.ListDiskLocationsResponse.DiskLocationsEntry.value:type_name -> v1alpha1.DiskLocation
	0, // 2: v1alpha1.Disk.ListDiskLocations:input_type -> v1alpha1.ListDiskLocationsRequest
	3, // 3: v1alpha1.Disk.PartitionDisk:input_type -> v1alpha1.PartitionDiskRequest
	5, // 4: v1alpha1.Disk.Rescan:input_type -> v1alpha1.RescanRequest
	7, // 5: v1alpha1.Disk.GetDiskNumberByName:input_type -> v1alpha1.GetDiskNumberByNameRequest
	2, // 6: v1alpha1.Disk.ListDiskLocations:output_type -> v1alpha1.ListDiskLocationsResponse
	4, // 7: v1alpha1.Disk.PartitionDisk:output_type -> v1alpha1.PartitionDiskResponse
	6, // 8: v1alpha1.Disk.Rescan:output_type -> v1alpha1.RescanResponse
	8, // 9: v1alpha1.Disk.GetDiskNumberByName:output_type -> v1alpha1.GetDiskNumberByNameResponse
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_client_api_disk_v1alpha1_api_proto_init() }
func file_client_api_disk_v1alpha1_api_proto_init() {
	if File_client_api_disk_v1alpha1_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_client_api_disk_v1alpha1_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDiskLocationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_api_disk_v1alpha1_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_api_disk_v1alpha1_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDiskLocationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_api_disk_v1alpha1_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionDiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_api_disk_v1alpha1_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionDiskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_api_disk_v1alpha1_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RescanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_api_disk_v1alpha1_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RescanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_api_disk_v1alpha1_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiskNumberByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_api_disk_v1alpha1_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiskNumberByNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_client_api_disk_v1alpha1_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_client_api_disk_v1alpha1_api_proto_goTypes,
		DependencyIndexes: file_client_api_disk_v1alpha1_api_proto_depIdxs,
		MessageInfos:      file_client_api_disk_v1alpha1_api_proto_msgTypes,
	}.Build()
	File_client_api_disk_v1alpha1_api_proto = out.File
	file_client_api_disk_v1alpha1_api_proto_rawDesc = nil
	file_client_api_disk_v1alpha1_api_proto_goTypes = nil
	file_client_api_disk_v1alpha1_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DiskClient is the client API for Disk service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DiskClient interface {
	// ListDiskLocations returns locations <Adapter, Bus, Target, LUN ID> of all
	// disk devices enumerated by the host
	ListDiskLocations(ctx context.Context, in *ListDiskLocationsRequest, opts ...grpc.CallOption) (*ListDiskLocationsResponse, error)
	// PartitionDisk initializes and partitions a disk device (if the disk has not
	// been partitioned already) and returns the resulting volume device ID
	PartitionDisk(ctx context.Context, in *PartitionDiskRequest, opts ...grpc.CallOption) (*PartitionDiskResponse, error)
	// Rescan refreshes the host's storage cache
	Rescan(ctx context.Context, in *RescanRequest, opts ...grpc.CallOption) (*RescanResponse, error)
	// GetDiskNumberByName returns disk number based on the passing disk name information
	GetDiskNumberByName(ctx context.Context, in *GetDiskNumberByNameRequest, opts ...grpc.CallOption) (*GetDiskNumberByNameResponse, error)
}

type diskClient struct {
	cc grpc.ClientConnInterface
}

func NewDiskClient(cc grpc.ClientConnInterface) DiskClient {
	return &diskClient{cc}
}

func (c *diskClient) ListDiskLocations(ctx context.Context, in *ListDiskLocationsRequest, opts ...grpc.CallOption) (*ListDiskLocationsResponse, error) {
	out := new(ListDiskLocationsResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.Disk/ListDiskLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskClient) PartitionDisk(ctx context.Context, in *PartitionDiskRequest, opts ...grpc.CallOption) (*PartitionDiskResponse, error) {
	out := new(PartitionDiskResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.Disk/PartitionDisk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskClient) Rescan(ctx context.Context, in *RescanRequest, opts ...grpc.CallOption) (*RescanResponse, error) {
	out := new(RescanResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.Disk/Rescan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskClient) GetDiskNumberByName(ctx context.Context, in *GetDiskNumberByNameRequest, opts ...grpc.CallOption) (*GetDiskNumberByNameResponse, error) {
	out := new(GetDiskNumberByNameResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.Disk/GetDiskNumberByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiskServer is the server API for Disk service.
type DiskServer interface {
	// ListDiskLocations returns locations <Adapter, Bus, Target, LUN ID> of all
	// disk devices enumerated by the host
	ListDiskLocations(context.Context, *ListDiskLocationsRequest) (*ListDiskLocationsResponse, error)
	// PartitionDisk initializes and partitions a disk device (if the disk has not
	// been partitioned already) and returns the resulting volume device ID
	PartitionDisk(context.Context, *PartitionDiskRequest) (*PartitionDiskResponse, error)
	// Rescan refreshes the host's storage cache
	Rescan(context.Context, *RescanRequest) (*RescanResponse, error)
	// GetDiskNumberByName returns disk number based on the passing disk name information
	GetDiskNumberByName(context.Context, *GetDiskNumberByNameRequest) (*GetDiskNumberByNameResponse, error)
}

// UnimplementedDiskServer can be embedded to have forward compatible implementations.
type UnimplementedDiskServer struct {
}

func (*UnimplementedDiskServer) ListDiskLocations(context.Context, *ListDiskLocationsRequest) (*ListDiskLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDiskLocations not implemented")
}
func (*UnimplementedDiskServer) PartitionDisk(context.Context, *PartitionDiskRequest) (*PartitionDiskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartitionDisk not implemented")
}
func (*UnimplementedDiskServer) Rescan(context.Context, *RescanRequest) (*RescanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rescan not implemented")
}
func (*UnimplementedDiskServer) GetDiskNumberByName(context.Context, *GetDiskNumberByNameRequest) (*GetDiskNumberByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiskNumberByName not implemented")
}

func RegisterDiskServer(s *grpc.Server, srv DiskServer) {
	s.RegisterService(&_Disk_serviceDesc, srv)
}

func _Disk_ListDiskLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDiskLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServer).ListDiskLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.Disk/ListDiskLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServer).ListDiskLocations(ctx, req.(*ListDiskLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disk_PartitionDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServer).PartitionDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.Disk/PartitionDisk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServer).PartitionDisk(ctx, req.(*PartitionDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disk_Rescan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RescanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServer).Rescan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.Disk/Rescan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServer).Rescan(ctx, req.(*RescanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disk_GetDiskNumberByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiskNumberByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServer).GetDiskNumberByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.Disk/GetDiskNumberByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServer).GetDiskNumberByName(ctx, req.(*GetDiskNumberByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Disk_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1alpha1.Disk",
	HandlerType: (*DiskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDiskLocations",
			Handler:    _Disk_ListDiskLocations_Handler,
		},
		{
			MethodName: "PartitionDisk",
			Handler:    _Disk_PartitionDisk_Handler,
		},
		{
			MethodName: "Rescan",
			Handler:    _Disk_Rescan_Handler,
		},
		{
			MethodName: "GetDiskNumberByName",
			Handler:    _Disk_GetDiskNumberByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client/api/disk/v1alpha1/api.proto",
}
