// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: client/api/filesystem/v1alpha1/api.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Context of the paths used for path prefix validation
type PathContext int32

const (
	// Indicates the kubelet-csi-plugins-path parameter of csi-proxy be used as
	// the path context. This may be used while handling NodeStageVolume where
	// a volume may need to be mounted at a plugin-specific path like:
	// kubelet\plugins\kubernetes.io\csi\pv\<pv-name>\globalmount
	PathContext_PLUGIN PathContext = 0
	// Indicates the kubelet-pod-path parameter of csi-proxy be used as the path
	// context. This may be used while handling NodePublishVolume where a staged
	// volume may be need to be symlinked to a pod-specific path like:
	// kubelet\pods\<pod-uuid>\volumes\kubernetes.io~csi\<pvc-name>\mount
	PathContext_POD PathContext = 1
)

// Enum value maps for PathContext.
var (
	PathContext_name = map[int32]string{
		0: "PLUGIN",
		1: "POD",
	}
	PathContext_value = map[string]int32{
		"PLUGIN": 0,
		"POD":    1,
	}
)

func (x PathContext) Enum() *PathContext {
	p := new(PathContext)
	*p = x
	return p
}

func (x PathContext) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PathContext) Descriptor() protoreflect.EnumDescriptor {
	return file_client_api_filesystem_v1alpha1_api_proto_enumTypes[0].Descriptor()
}

func (PathContext) Type() protoreflect.EnumType {
	return &file_client_api_filesystem_v1alpha1_api_proto_enumTypes[0]
}

func (x PathContext) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PathContext.Descriptor instead.
func (PathContext) EnumDescriptor() ([]byte, []int) {
	return file_client_api_filesystem_v1alpha1_api_proto_rawDescGZIP(), []int{0}
}

type PathExistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The path whose existence we want to check in the host's filesystem
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Context of the path parameter.
	// This is used to validate prefix for absolute paths passed
	Context PathContext `protobuf:"varint,2,opt,name=context,proto3,enum=v1alpha1.PathContext" json:"context,omitempty"`
}

func (x *PathExistsRequest) Reset() {
	*x = PathExistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_filesystem_v1alpha1_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathExistsRequest) ProtoMessage() {}

func (x *PathExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_filesystem_v1alpha1_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathExistsRequest.ProtoReflect.Descriptor instead.
func (*PathExistsRequest) Descriptor() ([]byte, []int) {
	return file_client_api_filesystem_v1alpha1_api_proto_rawDescGZIP(), []int{0}
}

func (x *PathExistsRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *PathExistsRequest) GetContext() PathContext {
	if x != nil {
		return x.Context
	}
	return PathContext_PLUGIN
}

type PathExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Error message if any. Empty string indicates success
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// Indicates whether the path in PathExistsRequest exists in the host's filesystem
	Exists bool `protobuf:"varint,2,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *PathExistsResponse) Reset() {
	*x = PathExistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_filesystem_v1alpha1_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathExistsResponse) ProtoMessage() {}

func (x *PathExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_filesystem_v1alpha1_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathExistsResponse.ProtoReflect.Descriptor instead.
func (*PathExistsResponse) Descriptor() ([]byte, []int) {
	return file_client_api_filesystem_v1alpha1_api_proto_rawDescGZIP(), []int{1}
}

func (x *PathExistsResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *PathExistsResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type MkdirRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The path to create in the host's filesystem.
	// All special characters allowed by Windows in path names will be allowed
	// except for restrictions noted below. For details, please check:
	// https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file
	// Non-existent parent directories in the path will be automatically created.
	// Directories will be created with Read and Write privileges of the Windows
	// User account under which csi-proxy is started (typically LocalSystem).
	//
	// Restrictions:
	// Only absolute path (indicated by a drive letter prefix: e.g. "C:\") is accepted.
	// Depending on the context parameter of this function, the path prefix needs
	// to match the paths specified either as kubelet-csi-plugins-path
	// or as kubelet-pod-path parameters of csi-proxy.
	// The path parameter cannot already exist in the host's filesystem.
	// UNC paths of the form "\\server\share\path\file" are not allowed.
	// All directory separators need to be backslash character: "\".
	// Characters: .. / : | ? * in the path are not allowed.
	// Maximum path length will be capped to 260 characters.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Context of the path parameter.
	// This is used to validate prefix for absolute paths passed
	Context PathContext `protobuf:"varint,2,opt,name=context,proto3,enum=v1alpha1.PathContext" json:"context,omitempty"`
}

func (x *MkdirRequest) Reset() {
	*x = MkdirRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_filesystem_v1alpha1_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MkdirRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MkdirRequest) ProtoMessage() {}

func (x *MkdirRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_filesystem_v1alpha1_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MkdirRequest.ProtoReflect.Descriptor instead.
func (*MkdirRequest) Descriptor() ([]byte, []int) {
	return file_client_api_filesystem_v1alpha1_api_proto_rawDescGZIP(), []int{2}
}

func (x *MkdirRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *MkdirRequest) GetContext() PathContext {
	if x != nil {
		return x.Context
	}
	return PathContext_PLUGIN
}

type MkdirResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Error message if any. Empty string indicates success
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *MkdirResponse) Reset() {
	*x = MkdirResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_filesystem_v1alpha1_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MkdirResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MkdirResponse) ProtoMessage() {}

func (x *MkdirResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_filesystem_v1alpha1_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MkdirResponse.ProtoReflect.Descriptor instead.
func (*MkdirResponse) Descriptor() ([]byte, []int) {
	return file_client_api_filesystem_v1alpha1_api_proto_rawDescGZIP(), []int{3}
}

func (x *MkdirResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type RmdirRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The path to remove in the host's filesystem.
	// All special characters allowed by Windows in path names will be allowed
	// except for restrictions noted below. For details, please check:
	// https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file
	//
	// Restrictions:
	// Only absolute path (indicated by a drive letter prefix: e.g. "C:\") is accepted.
	// Depending on the context parameter of this function, the path prefix needs
	// to match the paths specified either as kubelet-csi-plugins-path
	// or as kubelet-pod-path parameters of csi-proxy.
	// UNC paths of the form "\\server\share\path\file" are not allowed.
	// All directory separators need to be backslash character: "\".
	// Characters: .. / : | ? * in the path are not allowed.
	// Path cannot be a file of type symlink.
	// Maximum path length will be capped to 260 characters.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Context of the path parameter.
	// This is used to validate prefix for absolute paths passed
	Context PathContext `protobuf:"varint,2,opt,name=context,proto3,enum=v1alpha1.PathContext" json:"context,omitempty"`
	// Force remove all contents under path (if any).
	Force bool `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *RmdirRequest) Reset() {
	*x = RmdirRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_filesystem_v1alpha1_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RmdirRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RmdirRequest) ProtoMessage() {}

func (x *RmdirRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_filesystem_v1alpha1_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RmdirRequest.ProtoReflect.Descriptor instead.
func (*RmdirRequest) Descriptor() ([]byte, []int) {
	return file_client_api_filesystem_v1alpha1_api_proto_rawDescGZIP(), []int{4}
}

func (x *RmdirRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RmdirRequest) GetContext() PathContext {
	if x != nil {
		return x.Context
	}
	return PathContext_PLUGIN
}

func (x *RmdirRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type RmdirResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Error message if any. Empty string indicates success
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RmdirResponse) Reset() {
	*x = RmdirResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_filesystem_v1alpha1_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RmdirResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RmdirResponse) ProtoMessage() {}

func (x *RmdirResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_filesystem_v1alpha1_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RmdirResponse.ProtoReflect.Descriptor instead.
func (*RmdirResponse) Descriptor() ([]byte, []int) {
	return file_client_api_filesystem_v1alpha1_api_proto_rawDescGZIP(), []int{5}
}

func (x *RmdirResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type LinkPathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The path where the symlink is created in the host's filesystem.
	// All special characters allowed by Windows in path names will be allowed
	// except for restrictions noted below. For details, please check:
	// https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file
	//
	// Restrictions:
	// Only absolute path (indicated by a drive letter prefix: e.g. "C:\") is accepted.
	// The path prefix needs needs to match the paths specified as
	// kubelet-csi-plugins-path parameter of csi-proxy.
	// UNC paths of the form "\\server\share\path\file" are not allowed.
	// All directory separators need to be backslash character: "\".
	// Characters: .. / : | ? * in the path are not allowed.
	// source_path cannot already exist in the host filesystem.
	// Maximum path length will be capped to 260 characters.
	SourcePath string `protobuf:"bytes,1,opt,name=source_path,json=sourcePath,proto3" json:"source_path,omitempty"`
	// Target path in the host's filesystem used for the symlink creation.
	// All special characters allowed by Windows in path names will be allowed
	// except for restrictions noted below. For details, please check:
	// https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file
	//
	// Restrictions:
	// Only absolute path (indicated by a drive letter prefix: e.g. "C:\") is accepted.
	// The path prefix needs to match the paths specified as
	// kubelet-pod-path parameter of csi-proxy.
	// UNC paths of the form "\\server\share\path\file" are not allowed.
	// All directory separators need to be backslash character: "\".
	// Characters: .. / : | ? * in the path are not allowed.
	// target_path needs to exist as a directory in the host that is empty.
	// target_path cannot be a symbolic link.
	// Maximum path length will be capped to 260 characters.
	TargetPath string `protobuf:"bytes,2,opt,name=target_path,json=targetPath,proto3" json:"target_path,omitempty"`
}

func (x *LinkPathRequest) Reset() {
	*x = LinkPathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_filesystem_v1alpha1_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkPathRequest) ProtoMessage() {}

func (x *LinkPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_filesystem_v1alpha1_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkPathRequest.ProtoReflect.Descriptor instead.
func (*LinkPathRequest) Descriptor() ([]byte, []int) {
	return file_client_api_filesystem_v1alpha1_api_proto_rawDescGZIP(), []int{6}
}

func (x *LinkPathRequest) GetSourcePath() string {
	if x != nil {
		return x.SourcePath
	}
	return ""
}

func (x *LinkPathRequest) GetTargetPath() string {
	if x != nil {
		return x.TargetPath
	}
	return ""
}

type LinkPathResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Error message if any. Empty string indicates success
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *LinkPathResponse) Reset() {
	*x = LinkPathResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_filesystem_v1alpha1_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkPathResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkPathResponse) ProtoMessage() {}

func (x *LinkPathResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_filesystem_v1alpha1_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkPathResponse.ProtoReflect.Descriptor instead.
func (*LinkPathResponse) Descriptor() ([]byte, []int) {
	return file_client_api_filesystem_v1alpha1_api_proto_rawDescGZIP(), []int{7}
}

func (x *LinkPathResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type IsMountPointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The path whose existence we want to check in the host's filesystem
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *IsMountPointRequest) Reset() {
	*x = IsMountPointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_filesystem_v1alpha1_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsMountPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsMountPointRequest) ProtoMessage() {}

func (x *IsMountPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_filesystem_v1alpha1_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsMountPointRequest.ProtoReflect.Descriptor instead.
func (*IsMountPointRequest) Descriptor() ([]byte, []int) {
	return file_client_api_filesystem_v1alpha1_api_proto_rawDescGZIP(), []int{8}
}

func (x *IsMountPointRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type IsMountPointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Error message if any. Empty string indicates success
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// Indicates whether the path in PathExistsRequest exists in the host's filesystem
	IsMountPoint bool `protobuf:"varint,2,opt,name=is_mount_point,json=isMountPoint,proto3" json:"is_mount_point,omitempty"`
}

func (x *IsMountPointResponse) Reset() {
	*x = IsMountPointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_filesystem_v1alpha1_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsMountPointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsMountPointResponse) ProtoMessage() {}

func (x *IsMountPointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_filesystem_v1alpha1_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsMountPointResponse.ProtoReflect.Descriptor instead.
func (*IsMountPointResponse) Descriptor() ([]byte, []int) {
	return file_client_api_filesystem_v1alpha1_api_proto_rawDescGZIP(), []int{9}
}

func (x *IsMountPointResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *IsMountPointResponse) GetIsMountPoint() bool {
	if x != nil {
		return x.IsMountPoint
	}
	return false
}

var File_client_api_filesystem_v1alpha1_api_proto protoreflect.FileDescriptor

var file_client_api_filesystem_v1alpha1_api_proto_rawDesc = []byte{
	0x0a, 0x28, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x22, 0x58, 0x0a, 0x11, 0x50, 0x61, 0x74, 0x68, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2f, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x42,
	0x0a, 0x12, 0x50, 0x61, 0x74, 0x68, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x22, 0x53, 0x0a, 0x0c, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x25, 0x0a, 0x0d, 0x4d, 0x6b, 0x64, 0x69, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x69,
	0x0a, 0x0c, 0x52, 0x6d, 0x64, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50,
	0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x25, 0x0a, 0x0d, 0x52, 0x6d, 0x64,
	0x69, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x53, 0x0a, 0x0f, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0x28, 0x0a, 0x10, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x61, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x29, 0x0a, 0x13, 0x49, 0x73, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x52, 0x0a, 0x14, 0x49, 0x73,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x69, 0x73, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2a, 0x22,
	0x0a, 0x0b, 0x50, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x0a, 0x0a,
	0x06, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x4f, 0x44,
	0x10, 0x01, 0x32, 0xe5, 0x02, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x12, 0x49, 0x0a, 0x0a, 0x50, 0x61, 0x74, 0x68, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x1b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x05,
	0x4d, 0x6b, 0x64, 0x69, 0x72, 0x12, 0x16, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x05, 0x52, 0x6d, 0x64, 0x69,
	0x72, 0x12, 0x16, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x6d, 0x64,
	0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x6d, 0x64, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x08, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x19, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0c, 0x49, 0x73, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x73, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x49, 0x73, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x44, 0x5a, 0x42, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x2d, 0x63, 0x73, 0x69, 0x2f, 0x63, 0x73, 0x69, 0x2d, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_client_api_filesystem_v1alpha1_api_proto_rawDescOnce sync.Once
	file_client_api_filesystem_v1alpha1_api_proto_rawDescData = file_client_api_filesystem_v1alpha1_api_proto_rawDesc
)

func file_client_api_filesystem_v1alpha1_api_proto_rawDescGZIP() []byte {
	file_client_api_filesystem_v1alpha1_api_proto_rawDescOnce.Do(func() {
		file_client_api_filesystem_v1alpha1_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_client_api_filesystem_v1alpha1_api_proto_rawDescData)
	})
	return file_client_api_filesystem_v1alpha1_api_proto_rawDescData
}

var file_client_api_filesystem_v1alpha1_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_client_api_filesystem_v1alpha1_api_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_client_api_filesystem_v1alpha1_api_proto_goTypes = []interface{}{
	(PathContext)(0),             // 0: v1alpha1.PathContext
	(*PathExistsRequest)(nil),    // 1: v1alpha1.PathExistsRequest
	(*PathExistsResponse)(nil),   // 2: v1alpha1.PathExistsResponse
	(*MkdirRequest)(nil),         // 3: v1alpha1.MkdirRequest
	(*MkdirResponse)(nil),        // 4: v1alpha1.MkdirResponse
	(*RmdirRequest)(nil),         // 5: v1alpha1.RmdirRequest
	(*RmdirResponse)(nil),        // 6: v1alpha1.RmdirResponse
	(*LinkPathRequest)(nil),      // 7: v1alpha1.LinkPathRequest
	(*LinkPathResponse)(nil),     // 8: v1alpha1.LinkPathResponse
	(*IsMountPointRequest)(nil),  // 9: v1alpha1.IsMountPointRequest
	(*IsMountPointResponse)(nil), // 10: v1alpha1.IsMountPointResponse
}
var file_client_api_filesystem_v1alpha1_api_proto_depIdxs = []int32{
	0,  // 0: v1alpha1.PathExistsRequest.context:type_name -> v1alpha1.PathContext
	0,  // 1: v1alpha1.MkdirRequest.context:type_name -> v1alpha1.PathContext
	0,  // 2: v1alpha1.RmdirRequest.context:type_name -> v1alpha1.PathContext
	1,  // 3: v1alpha1.Filesystem.PathExists:input_type -> v1alpha1.PathExistsRequest
	3,  // 4: v1alpha1.Filesystem.Mkdir:input_type -> v1alpha1.MkdirRequest
	5,  // 5: v1alpha1.Filesystem.Rmdir:input_type -> v1alpha1.RmdirRequest
	7,  // 6: v1alpha1.Filesystem.LinkPath:input_type -> v1alpha1.LinkPathRequest
	9,  // 7: v1alpha1.Filesystem.IsMountPoint:input_type -> v1alpha1.IsMountPointRequest
	2,  // 8: v1alpha1.Filesystem.PathExists:output_type -> v1alpha1.PathExistsResponse
	4,  // 9: v1alpha1.Filesystem.Mkdir:output_type -> v1alpha1.MkdirResponse
	6,  // 10: v1alpha1.Filesystem.Rmdir:output_type -> v1alpha1.RmdirResponse
	8,  // 11: v1alpha1.Filesystem.LinkPath:output_type -> v1alpha1.LinkPathResponse
	10, // 12: v1alpha1.Filesystem.IsMountPoint:output_type -> v1alpha1.IsMountPointResponse
	8,  // [8:13] is the sub-list for method output_type
	3,  // [3:8] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_client_api_filesystem_v1alpha1_api_proto_init() }
func file_client_api_filesystem_v1alpha1_api_proto_init() {
	if File_client_api_filesystem_v1alpha1_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_client_api_filesystem_v1alpha1_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathExistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_api_filesystem_v1alpha1_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathExistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_api_filesystem_v1alpha1_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MkdirRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_api_filesystem_v1alpha1_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MkdirResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_api_filesystem_v1alpha1_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RmdirRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_api_filesystem_v1alpha1_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RmdirResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_api_filesystem_v1alpha1_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkPathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_api_filesystem_v1alpha1_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkPathResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_api_filesystem_v1alpha1_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsMountPointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_api_filesystem_v1alpha1_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsMountPointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_client_api_filesystem_v1alpha1_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_client_api_filesystem_v1alpha1_api_proto_goTypes,
		DependencyIndexes: file_client_api_filesystem_v1alpha1_api_proto_depIdxs,
		EnumInfos:         file_client_api_filesystem_v1alpha1_api_proto_enumTypes,
		MessageInfos:      file_client_api_filesystem_v1alpha1_api_proto_msgTypes,
	}.Build()
	File_client_api_filesystem_v1alpha1_api_proto = out.File
	file_client_api_filesystem_v1alpha1_api_proto_rawDesc = nil
	file_client_api_filesystem_v1alpha1_api_proto_goTypes = nil
	file_client_api_filesystem_v1alpha1_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FilesystemClient is the client API for Filesystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FilesystemClient interface {
	// PathExists checks if the requested path exists in the host's filesystem
	PathExists(ctx context.Context, in *PathExistsRequest, opts ...grpc.CallOption) (*PathExistsResponse, error)
	// Mkdir creates a directory at the requested path in the host's filesystem
	Mkdir(ctx context.Context, in *MkdirRequest, opts ...grpc.CallOption) (*MkdirResponse, error)
	// Rmdir removes the directory at the requested path in the host's filesystem.
	// This may be used for unlinking a symlink created through LinkPath
	Rmdir(ctx context.Context, in *RmdirRequest, opts ...grpc.CallOption) (*RmdirResponse, error)
	// LinkPath creates a local directory symbolic link between a source path
	// and target path in the host's filesystem
	LinkPath(ctx context.Context, in *LinkPathRequest, opts ...grpc.CallOption) (*LinkPathResponse, error)
	// IsMountPoint checks if a given path is mount or not
	IsMountPoint(ctx context.Context, in *IsMountPointRequest, opts ...grpc.CallOption) (*IsMountPointResponse, error)
}

type filesystemClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesystemClient(cc grpc.ClientConnInterface) FilesystemClient {
	return &filesystemClient{cc}
}

func (c *filesystemClient) PathExists(ctx context.Context, in *PathExistsRequest, opts ...grpc.CallOption) (*PathExistsResponse, error) {
	out := new(PathExistsResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.Filesystem/PathExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemClient) Mkdir(ctx context.Context, in *MkdirRequest, opts ...grpc.CallOption) (*MkdirResponse, error) {
	out := new(MkdirResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.Filesystem/Mkdir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemClient) Rmdir(ctx context.Context, in *RmdirRequest, opts ...grpc.CallOption) (*RmdirResponse, error) {
	out := new(RmdirResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.Filesystem/Rmdir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemClient) LinkPath(ctx context.Context, in *LinkPathRequest, opts ...grpc.CallOption) (*LinkPathResponse, error) {
	out := new(LinkPathResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.Filesystem/LinkPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemClient) IsMountPoint(ctx context.Context, in *IsMountPointRequest, opts ...grpc.CallOption) (*IsMountPointResponse, error) {
	out := new(IsMountPointResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.Filesystem/IsMountPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesystemServer is the server API for Filesystem service.
type FilesystemServer interface {
	// PathExists checks if the requested path exists in the host's filesystem
	PathExists(context.Context, *PathExistsRequest) (*PathExistsResponse, error)
	// Mkdir creates a directory at the requested path in the host's filesystem
	Mkdir(context.Context, *MkdirRequest) (*MkdirResponse, error)
	// Rmdir removes the directory at the requested path in the host's filesystem.
	// This may be used for unlinking a symlink created through LinkPath
	Rmdir(context.Context, *RmdirRequest) (*RmdirResponse, error)
	// LinkPath creates a local directory symbolic link between a source path
	// and target path in the host's filesystem
	LinkPath(context.Context, *LinkPathRequest) (*LinkPathResponse, error)
	// IsMountPoint checks if a given path is mount or not
	IsMountPoint(context.Context, *IsMountPointRequest) (*IsMountPointResponse, error)
}

// UnimplementedFilesystemServer can be embedded to have forward compatible implementations.
type UnimplementedFilesystemServer struct {
}

func (*UnimplementedFilesystemServer) PathExists(context.Context, *PathExistsRequest) (*PathExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PathExists not implemented")
}
func (*UnimplementedFilesystemServer) Mkdir(context.Context, *MkdirRequest) (*MkdirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mkdir not implemented")
}
func (*UnimplementedFilesystemServer) Rmdir(context.Context, *RmdirRequest) (*RmdirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rmdir not implemented")
}
func (*UnimplementedFilesystemServer) LinkPath(context.Context, *LinkPathRequest) (*LinkPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkPath not implemented")
}
func (*UnimplementedFilesystemServer) IsMountPoint(context.Context, *IsMountPointRequest) (*IsMountPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsMountPoint not implemented")
}

func RegisterFilesystemServer(s *grpc.Server, srv FilesystemServer) {
	s.RegisterService(&_Filesystem_serviceDesc, srv)
}

func _Filesystem_PathExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).PathExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.Filesystem/PathExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).PathExists(ctx, req.(*PathExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filesystem_Mkdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MkdirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).Mkdir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.Filesystem/Mkdir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).Mkdir(ctx, req.(*MkdirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filesystem_Rmdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RmdirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).Rmdir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.Filesystem/Rmdir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).Rmdir(ctx, req.(*RmdirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filesystem_LinkPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).LinkPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.Filesystem/LinkPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).LinkPath(ctx, req.(*LinkPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filesystem_IsMountPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsMountPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).IsMountPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.Filesystem/IsMountPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).IsMountPoint(ctx, req.(*IsMountPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Filesystem_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1alpha1.Filesystem",
	HandlerType: (*FilesystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PathExists",
			Handler:    _Filesystem_PathExists_Handler,
		},
		{
			MethodName: "Mkdir",
			Handler:    _Filesystem_Mkdir_Handler,
		},
		{
			MethodName: "Rmdir",
			Handler:    _Filesystem_Rmdir_Handler,
		},
		{
			MethodName: "LinkPath",
			Handler:    _Filesystem_LinkPath_Handler,
		},
		{
			MethodName: "IsMountPoint",
			Handler:    _Filesystem_IsMountPoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client/api/filesystem/v1alpha1/api.proto",
}
