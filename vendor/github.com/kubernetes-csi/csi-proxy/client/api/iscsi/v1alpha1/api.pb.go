// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: client/api/iscsi/v1alpha1/api.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AuthenticationType int32

const (
	// No authentication is used
	AuthenticationType_NONE AuthenticationType = 0
	// One way CHAP authentication. The target authenticates the initiator.
	AuthenticationType_ONE_WAY_CHAP AuthenticationType = 1
	// Mutual CHAP authentication. The target and initiator authenticate each
	// other.
	AuthenticationType_MUTUAL_CHAP AuthenticationType = 2
)

// Enum value maps for AuthenticationType.
var (
	AuthenticationType_name = map[int32]string{
		0: "NONE",
		1: "ONE_WAY_CHAP",
		2: "MUTUAL_CHAP",
	}
	AuthenticationType_value = map[string]int32{
		"NONE":         0,
		"ONE_WAY_CHAP": 1,
		"MUTUAL_CHAP":  2,
	}
)

func (x AuthenticationType) Enum() *AuthenticationType {
	p := new(AuthenticationType)
	*p = x
	return p
}

func (x AuthenticationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthenticationType) Descriptor() protoreflect.EnumDescriptor {
	return file_client_api_iscsi_v1alpha1_api_proto_enumTypes[0].Descriptor()
}

func (AuthenticationType) Type() protoreflect.EnumType {
	return &file_client_api_iscsi_v1alpha1_api_proto_enumTypes[0]
}

func (x AuthenticationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthenticationType.Descriptor instead.
func (AuthenticationType) EnumDescriptor() ([]byte, []int) {
	return file_client_api_iscsi_v1alpha1_api_proto_rawDescGZIP(), []int{0}
}

// TargetPortal is an address and port pair for a specific iSCSI storage
// target.
type TargetPortal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// iSCSI Target (server) address
	TargetAddress string `protobuf:"bytes,1,opt,name=target_address,json=targetAddress,proto3" json:"target_address,omitempty"`
	// iSCSI Target port (default iSCSI port is 3260)
	TargetPort uint32 `protobuf:"varint,2,opt,name=target_port,json=targetPort,proto3" json:"target_port,omitempty"`
}

func (x *TargetPortal) Reset() {
	*x = TargetPortal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_iscsi_v1alpha1_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetPortal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetPortal) ProtoMessage() {}

func (x *TargetPortal) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_iscsi_v1alpha1_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetPortal.ProtoReflect.Descriptor instead.
func (*TargetPortal) Descriptor() ([]byte, []int) {
	return file_client_api_iscsi_v1alpha1_api_proto_rawDescGZIP(), []int{0}
}

func (x *TargetPortal) GetTargetAddress() string {
	if x != nil {
		return x.TargetAddress
	}
	return ""
}

func (x *TargetPortal) GetTargetPort() uint32 {
	if x != nil {
		return x.TargetPort
	}
	return 0
}

type AddTargetPortalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// iSCSI Target Portal to register in the initiator
	TargetPortal *TargetPortal `protobuf:"bytes,1,opt,name=target_portal,json=targetPortal,proto3" json:"target_portal,omitempty"`
}

func (x *AddTargetPortalRequest) Reset() {
	*x = AddTargetPortalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_iscsi_v1alpha1_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTargetPortalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTargetPortalRequest) ProtoMessage() {}

func (x *AddTargetPortalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_iscsi_v1alpha1_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTargetPortalRequest.ProtoReflect.Descriptor instead.
func (*AddTargetPortalRequest) Descriptor() ([]byte, []int) {
	return file_client_api_iscsi_v1alpha1_api_proto_rawDescGZIP(), []int{1}
}

func (x *AddTargetPortalRequest) GetTargetPortal() *TargetPortal {
	if x != nil {
		return x.TargetPortal
	}
	return nil
}

type AddTargetPortalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddTargetPortalResponse) Reset() {
	*x = AddTargetPortalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_iscsi_v1alpha1_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTargetPortalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTargetPortalResponse) ProtoMessage() {}

func (x *AddTargetPortalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_iscsi_v1alpha1_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTargetPortalResponse.ProtoReflect.Descriptor instead.
func (*AddTargetPortalResponse) Descriptor() ([]byte, []int) {
	return file_client_api_iscsi_v1alpha1_api_proto_rawDescGZIP(), []int{2}
}

type DiscoverTargetPortalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// iSCSI Target Portal on which to initiate discovery
	TargetPortal *TargetPortal `protobuf:"bytes,1,opt,name=target_portal,json=targetPortal,proto3" json:"target_portal,omitempty"`
}

func (x *DiscoverTargetPortalRequest) Reset() {
	*x = DiscoverTargetPortalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_iscsi_v1alpha1_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverTargetPortalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverTargetPortalRequest) ProtoMessage() {}

func (x *DiscoverTargetPortalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_iscsi_v1alpha1_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverTargetPortalRequest.ProtoReflect.Descriptor instead.
func (*DiscoverTargetPortalRequest) Descriptor() ([]byte, []int) {
	return file_client_api_iscsi_v1alpha1_api_proto_rawDescGZIP(), []int{3}
}

func (x *DiscoverTargetPortalRequest) GetTargetPortal() *TargetPortal {
	if x != nil {
		return x.TargetPortal
	}
	return nil
}

type DiscoverTargetPortalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of discovered IQN addresses
	// follows IQN format: iqn.yyyy-mm.naming-authority:unique-name
	Iqns []string `protobuf:"bytes,1,rep,name=iqns,proto3" json:"iqns,omitempty"`
}

func (x *DiscoverTargetPortalResponse) Reset() {
	*x = DiscoverTargetPortalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_iscsi_v1alpha1_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverTargetPortalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverTargetPortalResponse) ProtoMessage() {}

func (x *DiscoverTargetPortalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_iscsi_v1alpha1_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverTargetPortalResponse.ProtoReflect.Descriptor instead.
func (*DiscoverTargetPortalResponse) Descriptor() ([]byte, []int) {
	return file_client_api_iscsi_v1alpha1_api_proto_rawDescGZIP(), []int{4}
}

func (x *DiscoverTargetPortalResponse) GetIqns() []string {
	if x != nil {
		return x.Iqns
	}
	return nil
}

type RemoveTargetPortalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// iSCSI Target Portal
	TargetPortal *TargetPortal `protobuf:"bytes,1,opt,name=target_portal,json=targetPortal,proto3" json:"target_portal,omitempty"`
}

func (x *RemoveTargetPortalRequest) Reset() {
	*x = RemoveTargetPortalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_iscsi_v1alpha1_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTargetPortalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTargetPortalRequest) ProtoMessage() {}

func (x *RemoveTargetPortalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_iscsi_v1alpha1_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTargetPortalRequest.ProtoReflect.Descriptor instead.
func (*RemoveTargetPortalRequest) Descriptor() ([]byte, []int) {
	return file_client_api_iscsi_v1alpha1_api_proto_rawDescGZIP(), []int{5}
}

func (x *RemoveTargetPortalRequest) GetTargetPortal() *TargetPortal {
	if x != nil {
		return x.TargetPortal
	}
	return nil
}

type RemoveTargetPortalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveTargetPortalResponse) Reset() {
	*x = RemoveTargetPortalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_iscsi_v1alpha1_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTargetPortalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTargetPortalResponse) ProtoMessage() {}

func (x *RemoveTargetPortalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_iscsi_v1alpha1_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTargetPortalResponse.ProtoReflect.Descriptor instead.
func (*RemoveTargetPortalResponse) Descriptor() ([]byte, []int) {
	return file_client_api_iscsi_v1alpha1_api_proto_rawDescGZIP(), []int{6}
}

type ListTargetPortalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListTargetPortalsRequest) Reset() {
	*x = ListTargetPortalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_iscsi_v1alpha1_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTargetPortalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTargetPortalsRequest) ProtoMessage() {}

func (x *ListTargetPortalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_iscsi_v1alpha1_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTargetPortalsRequest.ProtoReflect.Descriptor instead.
func (*ListTargetPortalsRequest) Descriptor() ([]byte, []int) {
	return file_client_api_iscsi_v1alpha1_api_proto_rawDescGZIP(), []int{7}
}

type ListTargetPortalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of Target Portals currently registered in the initiator
	TargetPortals []*TargetPortal `protobuf:"bytes,1,rep,name=target_portals,json=targetPortals,proto3" json:"target_portals,omitempty"`
}

func (x *ListTargetPortalsResponse) Reset() {
	*x = ListTargetPortalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_iscsi_v1alpha1_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTargetPortalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTargetPortalsResponse) ProtoMessage() {}

func (x *ListTargetPortalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_iscsi_v1alpha1_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTargetPortalsResponse.ProtoReflect.Descriptor instead.
func (*ListTargetPortalsResponse) Descriptor() ([]byte, []int) {
	return file_client_api_iscsi_v1alpha1_api_proto_rawDescGZIP(), []int{8}
}

func (x *ListTargetPortalsResponse) GetTargetPortals() []*TargetPortal {
	if x != nil {
		return x.TargetPortals
	}
	return nil
}

type ConnectTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target portal to which the initiator will connect
	TargetPortal *TargetPortal `protobuf:"bytes,1,opt,name=target_portal,json=targetPortal,proto3" json:"target_portal,omitempty"`
	// IQN of the iSCSI Target
	Iqn string `protobuf:"bytes,2,opt,name=iqn,proto3" json:"iqn,omitempty"`
	// Connection authentication type, None by default
	//
	// One Way Chap uses the chap_username and chap_secret
	// fields mentioned below to authenticate the initiator.
	//
	// Mutual Chap uses both the user/secret mentioned below
	// and the Initiator Chap Secret to authenticate the target and initiator.
	AuthType AuthenticationType `protobuf:"varint,3,opt,name=auth_type,json=authType,proto3,enum=v1alpha1.AuthenticationType" json:"auth_type,omitempty"`
	// CHAP Username used to authenticate the initiator
	ChapUsername string `protobuf:"bytes,4,opt,name=chap_username,json=chapUsername,proto3" json:"chap_username,omitempty"`
	// CHAP password used to authenticate the initiator
	ChapSecret string `protobuf:"bytes,5,opt,name=chap_secret,json=chapSecret,proto3" json:"chap_secret,omitempty"`
}

func (x *ConnectTargetRequest) Reset() {
	*x = ConnectTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_iscsi_v1alpha1_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectTargetRequest) ProtoMessage() {}

func (x *ConnectTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_iscsi_v1alpha1_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectTargetRequest.ProtoReflect.Descriptor instead.
func (*ConnectTargetRequest) Descriptor() ([]byte, []int) {
	return file_client_api_iscsi_v1alpha1_api_proto_rawDescGZIP(), []int{9}
}

func (x *ConnectTargetRequest) GetTargetPortal() *TargetPortal {
	if x != nil {
		return x.TargetPortal
	}
	return nil
}

func (x *ConnectTargetRequest) GetIqn() string {
	if x != nil {
		return x.Iqn
	}
	return ""
}

func (x *ConnectTargetRequest) GetAuthType() AuthenticationType {
	if x != nil {
		return x.AuthType
	}
	return AuthenticationType_NONE
}

func (x *ConnectTargetRequest) GetChapUsername() string {
	if x != nil {
		return x.ChapUsername
	}
	return ""
}

func (x *ConnectTargetRequest) GetChapSecret() string {
	if x != nil {
		return x.ChapSecret
	}
	return ""
}

type ConnectTargetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConnectTargetResponse) Reset() {
	*x = ConnectTargetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_iscsi_v1alpha1_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectTargetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectTargetResponse) ProtoMessage() {}

func (x *ConnectTargetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_iscsi_v1alpha1_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectTargetResponse.ProtoReflect.Descriptor instead.
func (*ConnectTargetResponse) Descriptor() ([]byte, []int) {
	return file_client_api_iscsi_v1alpha1_api_proto_rawDescGZIP(), []int{10}
}

type GetTargetDisksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target portal whose disks will be queried
	TargetPortal *TargetPortal `protobuf:"bytes,1,opt,name=target_portal,json=targetPortal,proto3" json:"target_portal,omitempty"`
	// IQN of the iSCSI Target
	Iqn string `protobuf:"bytes,2,opt,name=iqn,proto3" json:"iqn,omitempty"`
}

func (x *GetTargetDisksRequest) Reset() {
	*x = GetTargetDisksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_iscsi_v1alpha1_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTargetDisksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTargetDisksRequest) ProtoMessage() {}

func (x *GetTargetDisksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_iscsi_v1alpha1_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTargetDisksRequest.ProtoReflect.Descriptor instead.
func (*GetTargetDisksRequest) Descriptor() ([]byte, []int) {
	return file_client_api_iscsi_v1alpha1_api_proto_rawDescGZIP(), []int{11}
}

func (x *GetTargetDisksRequest) GetTargetPortal() *TargetPortal {
	if x != nil {
		return x.TargetPortal
	}
	return nil
}

func (x *GetTargetDisksRequest) GetIqn() string {
	if x != nil {
		return x.Iqn
	}
	return ""
}

type GetTargetDisksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List composed of disk ids (numbers) that are associated with the
	// iSCSI target
	DiskIDs []string `protobuf:"bytes,1,rep,name=diskIDs,proto3" json:"diskIDs,omitempty"`
}

func (x *GetTargetDisksResponse) Reset() {
	*x = GetTargetDisksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_iscsi_v1alpha1_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTargetDisksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTargetDisksResponse) ProtoMessage() {}

func (x *GetTargetDisksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_iscsi_v1alpha1_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTargetDisksResponse.ProtoReflect.Descriptor instead.
func (*GetTargetDisksResponse) Descriptor() ([]byte, []int) {
	return file_client_api_iscsi_v1alpha1_api_proto_rawDescGZIP(), []int{12}
}

func (x *GetTargetDisksResponse) GetDiskIDs() []string {
	if x != nil {
		return x.DiskIDs
	}
	return nil
}

type DisconnectTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target portal from which initiator will disconnect
	TargetPortal *TargetPortal `protobuf:"bytes,1,opt,name=target_portal,json=targetPortal,proto3" json:"target_portal,omitempty"`
	// IQN of the iSCSI Target
	Iqn string `protobuf:"bytes,2,opt,name=iqn,proto3" json:"iqn,omitempty"`
}

func (x *DisconnectTargetRequest) Reset() {
	*x = DisconnectTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_iscsi_v1alpha1_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectTargetRequest) ProtoMessage() {}

func (x *DisconnectTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_iscsi_v1alpha1_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectTargetRequest.ProtoReflect.Descriptor instead.
func (*DisconnectTargetRequest) Descriptor() ([]byte, []int) {
	return file_client_api_iscsi_v1alpha1_api_proto_rawDescGZIP(), []int{13}
}

func (x *DisconnectTargetRequest) GetTargetPortal() *TargetPortal {
	if x != nil {
		return x.TargetPortal
	}
	return nil
}

func (x *DisconnectTargetRequest) GetIqn() string {
	if x != nil {
		return x.Iqn
	}
	return ""
}

type DisconnectTargetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisconnectTargetResponse) Reset() {
	*x = DisconnectTargetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_api_iscsi_v1alpha1_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectTargetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectTargetResponse) ProtoMessage() {}

func (x *DisconnectTargetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_api_iscsi_v1alpha1_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectTargetResponse.ProtoReflect.Descriptor instead.
func (*DisconnectTargetResponse) Descriptor() ([]byte, []int) {
	return file_client_api_iscsi_v1alpha1_api_proto_rawDescGZIP(), []int{14}
}

var File_client_api_iscsi_v1alpha1_api_proto protoreflect.FileDescriptor

var file_client_api_iscsi_v1alpha1_api_proto_rawDesc = []byte{
	0x0a, 0x23, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x63,
	0x73, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x22,
	0x56, 0x0a, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x55, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c,
	0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x22, 0x19,
	0x0a, 0x17, 0x41, 0x64, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5a, 0x0a, 0x1b, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x22, 0x32, 0x0a, 0x1c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x71, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x69, 0x71, 0x6e, 0x73, 0x22, 0x58, 0x0a, 0x19, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x61, 0x6c, 0x22, 0x1c, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1a, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5a, 0x0a,
	0x19, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x73, 0x22, 0xe6, 0x01, 0x0a, 0x14, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61,
	0x6c, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x71, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x71,
	0x6e, 0x12, 0x39, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x68, 0x61, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x70, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x70, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x61, 0x6c, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x71, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x69, 0x71, 0x6e, 0x22, 0x32, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x44, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x69, 0x73, 0x6b, 0x49, 0x44, 0x73, 0x22, 0x68, 0x0a, 0x17, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61,
	0x6c, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x71, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x71,
	0x6e, 0x22, 0x1a, 0x0a, 0x18, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x41, 0x0a,
	0x12, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x4f, 0x4e, 0x45, 0x5f, 0x57, 0x41, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x50, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x4d, 0x55, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x50, 0x10, 0x02,
	0x32, 0x95, 0x05, 0x0a, 0x05, 0x49, 0x73, 0x63, 0x73, 0x69, 0x12, 0x58, 0x0a, 0x0f, 0x41, 0x64,
	0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x12, 0x25, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a,
	0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x61, 0x6c, 0x12, 0x23, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5e, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x73, 0x12, 0x22, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x52, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x1e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x21, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x55, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x69,
	0x73, 0x6b, 0x73, 0x12, 0x1f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x2d, 0x63, 0x73, 0x69, 0x2f, 0x63, 0x73, 0x69, 0x2d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x63, 0x73, 0x69,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_client_api_iscsi_v1alpha1_api_proto_rawDescOnce sync.Once
	file_client_api_iscsi_v1alpha1_api_proto_rawDescData = file_client_api_iscsi_v1alpha1_api_proto_rawDesc
)

func file_client_api_iscsi_v1alpha1_api_proto_rawDescGZIP() []byte {
	file_client_api_iscsi_v1alpha1_api_proto_rawDescOnce.Do(func() {
		file_client_api_iscsi_v1alpha1_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_client_api_iscsi_v1alpha1_api_proto_rawDescData)
	})
	return file_client_api_iscsi_v1alpha1_api_proto_rawDescData
}

var file_client_api_iscsi_v1alpha1_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_client_api_iscsi_v1alpha1_api_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_client_api_iscsi_v1alpha1_api_proto_goTypes = []interface{}{
	(AuthenticationType)(0),              // 0: v1alpha1.AuthenticationType
	(*TargetPortal)(nil),                 // 1: v1alpha1.TargetPortal
	(*AddTargetPortalRequest)(nil),       // 2: v1alpha1.AddTargetPortalRequest
	(*AddTargetPortalResponse)(nil),      // 3: v1alpha1.AddTargetPortalResponse
	(*DiscoverTargetPortalRequest)(nil),  // 4: v1alpha1.DiscoverTargetPortalRequest
	(*DiscoverTargetPortalResponse)(nil), // 5: v1alpha1.DiscoverTargetPortalResponse
	(*RemoveTargetPortalRequest)(nil),    // 6: v1alpha1.RemoveTargetPortalRequest
	(*RemoveTargetPortalResponse)(nil),   // 7: v1alpha1.RemoveTargetPortalResponse
	(*ListTargetPortalsRequest)(nil),     // 8: v1alpha1.ListTargetPortalsRequest
	(*ListTargetPortalsResponse)(nil),    // 9: v1alpha1.ListTargetPortalsResponse
	(*ConnectTargetRequest)(nil),         // 10: v1alpha1.ConnectTargetRequest
	(*ConnectTargetResponse)(nil),        // 11: v1alpha1.ConnectTargetResponse
	(*GetTargetDisksRequest)(nil),        // 12: v1alpha1.GetTargetDisksRequest
	(*GetTargetDisksResponse)(nil),       // 13: v1alpha1.GetTargetDisksResponse
	(*DisconnectTargetRequest)(nil),      // 14: v1alpha1.DisconnectTargetRequest
	(*DisconnectTargetResponse)(nil),     // 15: v1alpha1.DisconnectTargetResponse
}
var file_client_api_iscsi_v1alpha1_api_proto_depIdxs = []int32{
	1,  // 0: v1alpha1.AddTargetPortalRequest.target_portal:type_name -> v1alpha1.TargetPortal
	1,  // 1: v1alpha1.DiscoverTargetPortalRequest.target_portal:type_name -> v1alpha1.TargetPortal
	1,  // 2: v1alpha1.RemoveTargetPortalRequest.target_portal:type_name -> v1alpha1.TargetPortal
	1,  // 3: v1alpha1.ListTargetPortalsResponse.target_portals:type_name -> v1alpha1.TargetPortal
	1,  // 4: v1alpha1.ConnectTargetRequest.target_portal:type_name -> v1alpha1.TargetPortal
	0,  // 5: v1alpha1.ConnectTargetRequest.auth_type:type_name -> v1alpha1.AuthenticationType
	1,  // 6: v1alpha1.GetTargetDisksRequest.target_portal:type_name -> v1alpha1.TargetPortal
	1,  // 7: v1alpha1.DisconnectTargetRequest.target_portal:type_name -> v1alpha1.TargetPortal
	2,  // 8: v1alpha1.Iscsi.AddTargetPortal:input_type -> v1alpha1.AddTargetPortalRequest
	4,  // 9: v1alpha1.Iscsi.DiscoverTargetPortal:input_type -> v1alpha1.DiscoverTargetPortalRequest
	6,  // 10: v1alpha1.Iscsi.RemoveTargetPortal:input_type -> v1alpha1.RemoveTargetPortalRequest
	8,  // 11: v1alpha1.Iscsi.ListTargetPortals:input_type -> v1alpha1.ListTargetPortalsRequest
	10, // 12: v1alpha1.Iscsi.ConnectTarget:input_type -> v1alpha1.ConnectTargetRequest
	14, // 13: v1alpha1.Iscsi.DisconnectTarget:input_type -> v1alpha1.DisconnectTargetRequest
	12, // 14: v1alpha1.Iscsi.GetTargetDisks:input_type -> v1alpha1.GetTargetDisksRequest
	3,  // 15: v1alpha1.Iscsi.AddTargetPortal:output_type -> v1alpha1.AddTargetPortalResponse
	5,  // 16: v1alpha1.Iscsi.DiscoverTargetPortal:output_type -> v1alpha1.DiscoverTargetPortalResponse
	7,  // 17: v1alpha1.Iscsi.RemoveTargetPortal:output_type -> v1alpha1.RemoveTargetPortalResponse
	9,  // 18: v1alpha1.Iscsi.ListTargetPortals:output_type -> v1alpha1.ListTargetPortalsResponse
	11, // 19: v1alpha1.Iscsi.ConnectTarget:output_type -> v1alpha1.ConnectTargetResponse
	15, // 20: v1alpha1.Iscsi.DisconnectTarget:output_type -> v1alpha1.DisconnectTargetResponse
	13, // 21: v1alpha1.Iscsi.GetTargetDisks:output_type -> v1alpha1.GetTargetDisksResponse
	15, // [15:22] is the sub-list for method output_type
	8,  // [8:15] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_client_api_iscsi_v1alpha1_api_proto_init() }
func file_client_api_iscsi_v1alpha1_api_proto_init() {
	if File_client_api_iscsi_v1alpha1_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_client_api_iscsi_v1alpha1_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetPortal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_api_iscsi_v1alpha1_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTargetPortalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_api_iscsi_v1alpha1_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTargetPortalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_api_iscsi_v1alpha1_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoverTargetPortalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_api_iscsi_v1alpha1_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoverTargetPortalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_api_iscsi_v1alpha1_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTargetPortalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_api_iscsi_v1alpha1_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTargetPortalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_api_iscsi_v1alpha1_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTargetPortalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_api_iscsi_v1alpha1_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTargetPortalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_api_iscsi_v1alpha1_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_api_iscsi_v1alpha1_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectTargetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_api_iscsi_v1alpha1_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTargetDisksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_api_iscsi_v1alpha1_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTargetDisksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_api_iscsi_v1alpha1_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisconnectTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_api_iscsi_v1alpha1_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisconnectTargetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_client_api_iscsi_v1alpha1_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_client_api_iscsi_v1alpha1_api_proto_goTypes,
		DependencyIndexes: file_client_api_iscsi_v1alpha1_api_proto_depIdxs,
		EnumInfos:         file_client_api_iscsi_v1alpha1_api_proto_enumTypes,
		MessageInfos:      file_client_api_iscsi_v1alpha1_api_proto_msgTypes,
	}.Build()
	File_client_api_iscsi_v1alpha1_api_proto = out.File
	file_client_api_iscsi_v1alpha1_api_proto_rawDesc = nil
	file_client_api_iscsi_v1alpha1_api_proto_goTypes = nil
	file_client_api_iscsi_v1alpha1_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IscsiClient is the client API for Iscsi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IscsiClient interface {
	// AddTargetPortal registers an iSCSI target network address for later
	// discovery.
	// AddTargetPortal currently does not support selecting different NICs or
	// a different iSCSI initiator (e.g a hardware initiator). This means that
	// Windows will select the initiator NIC and instance on its own.
	AddTargetPortal(ctx context.Context, in *AddTargetPortalRequest, opts ...grpc.CallOption) (*AddTargetPortalResponse, error)
	// DiscoverTargetPortal initiates discovery on an iSCSI target network address
	// and returns discovered IQNs.
	DiscoverTargetPortal(ctx context.Context, in *DiscoverTargetPortalRequest, opts ...grpc.CallOption) (*DiscoverTargetPortalResponse, error)
	// RemoveTargetPortal removes an iSCSI target network address registration.
	RemoveTargetPortal(ctx context.Context, in *RemoveTargetPortalRequest, opts ...grpc.CallOption) (*RemoveTargetPortalResponse, error)
	// ListTargetPortal lists all currently registered iSCSI target network
	// addresses.
	ListTargetPortals(ctx context.Context, in *ListTargetPortalsRequest, opts ...grpc.CallOption) (*ListTargetPortalsResponse, error)
	// ConnectTarget connects to an iSCSI Target
	ConnectTarget(ctx context.Context, in *ConnectTargetRequest, opts ...grpc.CallOption) (*ConnectTargetResponse, error)
	// DisconnectTarget disconnects from an iSCSI Target
	DisconnectTarget(ctx context.Context, in *DisconnectTargetRequest, opts ...grpc.CallOption) (*DisconnectTargetResponse, error)
	// GetTargetDisks returns the disk addresses that correspond to an iSCSI
	// target
	GetTargetDisks(ctx context.Context, in *GetTargetDisksRequest, opts ...grpc.CallOption) (*GetTargetDisksResponse, error)
}

type iscsiClient struct {
	cc grpc.ClientConnInterface
}

func NewIscsiClient(cc grpc.ClientConnInterface) IscsiClient {
	return &iscsiClient{cc}
}

func (c *iscsiClient) AddTargetPortal(ctx context.Context, in *AddTargetPortalRequest, opts ...grpc.CallOption) (*AddTargetPortalResponse, error) {
	out := new(AddTargetPortalResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.Iscsi/AddTargetPortal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iscsiClient) DiscoverTargetPortal(ctx context.Context, in *DiscoverTargetPortalRequest, opts ...grpc.CallOption) (*DiscoverTargetPortalResponse, error) {
	out := new(DiscoverTargetPortalResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.Iscsi/DiscoverTargetPortal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iscsiClient) RemoveTargetPortal(ctx context.Context, in *RemoveTargetPortalRequest, opts ...grpc.CallOption) (*RemoveTargetPortalResponse, error) {
	out := new(RemoveTargetPortalResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.Iscsi/RemoveTargetPortal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iscsiClient) ListTargetPortals(ctx context.Context, in *ListTargetPortalsRequest, opts ...grpc.CallOption) (*ListTargetPortalsResponse, error) {
	out := new(ListTargetPortalsResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.Iscsi/ListTargetPortals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iscsiClient) ConnectTarget(ctx context.Context, in *ConnectTargetRequest, opts ...grpc.CallOption) (*ConnectTargetResponse, error) {
	out := new(ConnectTargetResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.Iscsi/ConnectTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iscsiClient) DisconnectTarget(ctx context.Context, in *DisconnectTargetRequest, opts ...grpc.CallOption) (*DisconnectTargetResponse, error) {
	out := new(DisconnectTargetResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.Iscsi/DisconnectTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iscsiClient) GetTargetDisks(ctx context.Context, in *GetTargetDisksRequest, opts ...grpc.CallOption) (*GetTargetDisksResponse, error) {
	out := new(GetTargetDisksResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.Iscsi/GetTargetDisks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IscsiServer is the server API for Iscsi service.
type IscsiServer interface {
	// AddTargetPortal registers an iSCSI target network address for later
	// discovery.
	// AddTargetPortal currently does not support selecting different NICs or
	// a different iSCSI initiator (e.g a hardware initiator). This means that
	// Windows will select the initiator NIC and instance on its own.
	AddTargetPortal(context.Context, *AddTargetPortalRequest) (*AddTargetPortalResponse, error)
	// DiscoverTargetPortal initiates discovery on an iSCSI target network address
	// and returns discovered IQNs.
	DiscoverTargetPortal(context.Context, *DiscoverTargetPortalRequest) (*DiscoverTargetPortalResponse, error)
	// RemoveTargetPortal removes an iSCSI target network address registration.
	RemoveTargetPortal(context.Context, *RemoveTargetPortalRequest) (*RemoveTargetPortalResponse, error)
	// ListTargetPortal lists all currently registered iSCSI target network
	// addresses.
	ListTargetPortals(context.Context, *ListTargetPortalsRequest) (*ListTargetPortalsResponse, error)
	// ConnectTarget connects to an iSCSI Target
	ConnectTarget(context.Context, *ConnectTargetRequest) (*ConnectTargetResponse, error)
	// DisconnectTarget disconnects from an iSCSI Target
	DisconnectTarget(context.Context, *DisconnectTargetRequest) (*DisconnectTargetResponse, error)
	// GetTargetDisks returns the disk addresses that correspond to an iSCSI
	// target
	GetTargetDisks(context.Context, *GetTargetDisksRequest) (*GetTargetDisksResponse, error)
}

// UnimplementedIscsiServer can be embedded to have forward compatible implementations.
type UnimplementedIscsiServer struct {
}

func (*UnimplementedIscsiServer) AddTargetPortal(context.Context, *AddTargetPortalRequest) (*AddTargetPortalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTargetPortal not implemented")
}
func (*UnimplementedIscsiServer) DiscoverTargetPortal(context.Context, *DiscoverTargetPortalRequest) (*DiscoverTargetPortalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverTargetPortal not implemented")
}
func (*UnimplementedIscsiServer) RemoveTargetPortal(context.Context, *RemoveTargetPortalRequest) (*RemoveTargetPortalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTargetPortal not implemented")
}
func (*UnimplementedIscsiServer) ListTargetPortals(context.Context, *ListTargetPortalsRequest) (*ListTargetPortalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTargetPortals not implemented")
}
func (*UnimplementedIscsiServer) ConnectTarget(context.Context, *ConnectTargetRequest) (*ConnectTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectTarget not implemented")
}
func (*UnimplementedIscsiServer) DisconnectTarget(context.Context, *DisconnectTargetRequest) (*DisconnectTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectTarget not implemented")
}
func (*UnimplementedIscsiServer) GetTargetDisks(context.Context, *GetTargetDisksRequest) (*GetTargetDisksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTargetDisks not implemented")
}

func RegisterIscsiServer(s *grpc.Server, srv IscsiServer) {
	s.RegisterService(&_Iscsi_serviceDesc, srv)
}

func _Iscsi_AddTargetPortal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTargetPortalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IscsiServer).AddTargetPortal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.Iscsi/AddTargetPortal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IscsiServer).AddTargetPortal(ctx, req.(*AddTargetPortalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iscsi_DiscoverTargetPortal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverTargetPortalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IscsiServer).DiscoverTargetPortal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.Iscsi/DiscoverTargetPortal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IscsiServer).DiscoverTargetPortal(ctx, req.(*DiscoverTargetPortalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iscsi_RemoveTargetPortal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTargetPortalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IscsiServer).RemoveTargetPortal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.Iscsi/RemoveTargetPortal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IscsiServer).RemoveTargetPortal(ctx, req.(*RemoveTargetPortalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iscsi_ListTargetPortals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTargetPortalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IscsiServer).ListTargetPortals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.Iscsi/ListTargetPortals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IscsiServer).ListTargetPortals(ctx, req.(*ListTargetPortalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iscsi_ConnectTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IscsiServer).ConnectTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.Iscsi/ConnectTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IscsiServer).ConnectTarget(ctx, req.(*ConnectTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iscsi_DisconnectTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IscsiServer).DisconnectTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.Iscsi/DisconnectTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IscsiServer).DisconnectTarget(ctx, req.(*DisconnectTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iscsi_GetTargetDisks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTargetDisksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IscsiServer).GetTargetDisks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.Iscsi/GetTargetDisks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IscsiServer).GetTargetDisks(ctx, req.(*GetTargetDisksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Iscsi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1alpha1.Iscsi",
	HandlerType: (*IscsiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTargetPortal",
			Handler:    _Iscsi_AddTargetPortal_Handler,
		},
		{
			MethodName: "DiscoverTargetPortal",
			Handler:    _Iscsi_DiscoverTargetPortal_Handler,
		},
		{
			MethodName: "RemoveTargetPortal",
			Handler:    _Iscsi_RemoveTargetPortal_Handler,
		},
		{
			MethodName: "ListTargetPortals",
			Handler:    _Iscsi_ListTargetPortals_Handler,
		},
		{
			MethodName: "ConnectTarget",
			Handler:    _Iscsi_ConnectTarget_Handler,
		},
		{
			MethodName: "DisconnectTarget",
			Handler:    _Iscsi_DisconnectTarget_Handler,
		},
		{
			MethodName: "GetTargetDisks",
			Handler:    _Iscsi_GetTargetDisks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client/api/iscsi/v1alpha1/api.proto",
}
